CURRENT BRANCH: ArrayToList

UP TO: Checking validation for filtering still (run program to see)
Idea from: Ben J., 2nd year DSA Tutor

CASE 1:
    - Creates two lists: ALL and FILTER; the first is a complete list that 
    remains complete for usage in CASE 2.
    - ALL receives the file input, and copies this to FILTER.
    - FILTER is then optionally filtered, ordered and printed to screen/file.
    - From there ALL is available for use elsewhere.

FORMAT.JAVA line 348 - if validation for choice
- Not using Validation.java because it's simple, and because it would have
meant over re-work of my validateChoice function
- I understand that usually I have the invalid if block first, but this 
inexplicably caused issues - so I'll do it this way 
    UNLESS IT WORKS WITH STRING EQUALS - TESTING

NOTE ON TREE
- Didn't use tree in the end, because was unsure how to check if a substring
  is contained in a tree's key.
  Plus, I think the way the tree is implemented means that a substring that
  matched a term would just make it go left? Because there's less characters?
- Considered making the key the first character of the Candidate surname, which
  would allow me to find the node each time - but then I would have to check the
  whole surname against the rest of the key, and THEN if it's not right, it would
  have to unwind, come back, and dive back in all the way down the tree for 
  another go. With a list iterator, the spot in the list is maintained, which
  means we don't have to keep re-finding our spot each time. I just couldn't see
  a way to make the tree work more effectively here.

NOTE ON SEARCH
- I don't think I'll bother throwing the list into an array to sort alphabetically,
  because that would be O(N) - although... the search would have to perform an
  additional contains() operation on each one, so it mightttt be better...
- Yeah let's do it.
- If I had more time, I'd have a crack at a hash table. I could use a combination
of name and either division or candidate ID for the key (not guaranteed to be unique
with the former, but it's not an int), and then I'd implement a similar search
system to what I already have.

NOTE ON PART 3
- Using linked list sigh.
- Hash Table: Giving it a go; I felt like I was going through the motions just
using linked lists, so I wanted to give this a go. Not sure if it will work, or
if it will destroy my chances at finishing the assignment, but I'm here to learn
above all else, so sod it.

PART 3 PLAN
PRE
- Create linked list with file in loadCandidates, return to menu;

1) I pass an integer array (size known) and the list into makeArray.

3) Transfer the list to the array, and create a new hash table.

4) Chuck into merge sort.

5) Make a pass through the array, retrieving the array index of the first 
   instance of each party, and creating a new Hash Table entry with this index
   and the String abbreviation of the associated party.

6) Return the hash table (array is passed by reference).

7) User calls getMarginalSeat which imports the array and hash table.

8) User enters party abbreviation; hash table is searched for appropriate entry,
   and a for loop iterates through the array until the party name changes.
   - Could possibly loop until NEXT party index, but hard to do maybe?
   - Take the computational hit in the interest of saving time (SATURDAY!!)

9) Votes are tallied in the loop; whatever calculations needed are done.

WAIT!!

I can import a hash table and the array into the read file. I create a list
inside the read function, read the file into the list, transfer to the array, 
sort that array, and then make a pass through it to retrieve the indexes and 
create the hash table entries inside. Then I return the hash table, and the 
array is passed by reference, and no list is returned.


1) Retrieve party, and get index from hash table.

2) iterate through array, retrieving all divisions where the party is.
- So for Greens/Libs/Labour would be most if not all.

3) Put these divisions into an array?

4) Sort the array by division.

5) Go through the array by division, tallying up votes for the party against 
   the other votes.

6) At the end of each division, check the total, and percentage of votes for
   party - see if within default (or custom) threshold.

7) If so, add to a linked list.

NOTE ON PART 2
If I had time, I'd go back and implement the search with a hash table. I'd use
a key, the key being the first letter of the candidate surname, and have an
array sorted alphabetically. I'd retrieve the key from the hashtable, which 
would store an index of where these surnames start - say all names beginning
with "D" - and then I'd check just those.

DID NOT TEST OPTIONAL SAVE BECAUSE IT'S SO EASY TO TEST.

EDGE CLASS
weight, label, pointer to vert1 and vert2.
